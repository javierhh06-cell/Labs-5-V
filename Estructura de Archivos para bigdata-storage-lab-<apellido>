bigdata-storage-lab-<apellido>/
‚îú‚îÄ‚îÄ data/
‚îÇ   ‚îú‚îÄ‚îÄ raw/
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ .gitkeep
‚îÇ   ‚îú‚îÄ‚îÄ bronze/
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ .gitkeep
‚îÇ   ‚îú‚îÄ‚îÄ silver/
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ .gitkeep
‚îÇ   ‚îî‚îÄ‚îÄ gold/
‚îÇ       ‚îî‚îÄ‚îÄ .gitkeep
‚îú‚îÄ‚îÄ docs/
‚îÇ   ‚îú‚îÄ‚îÄ diccionario.md
‚îÇ   ‚îî‚îÄ‚îÄ gobernanza.md
‚îú‚îÄ‚îÄ notebooks/
‚îú‚îÄ‚îÄ src/
‚îÇ   ‚îú‚îÄ‚îÄ ingest.py
‚îÇ   ‚îú‚îÄ‚îÄ validate.py
‚îÇ   ‚îî‚îÄ‚îÄ transform.py
‚îú‚îÄ‚îÄ tests/
‚îÇ   ‚îî‚îÄ‚îÄ checklist.md
‚îú‚îÄ‚îÄ requirements.txt
‚îî‚îÄ‚îÄ streamlit_app.py



# requirements.txt

streamlit
pandas
pyarrow
python-dateutil

streamlit_app.py

import streamlit as st

def main():
    st.set_page_config(page_title="Almac√©n Anal√≠tico", layout="wide")
    st.title("üìä De CSVs heterog√©neos a un almac√©n anal√≠tico confiable")
    st.write("Dashboard de monitoreo de calidad de datos y KPIs")
    
    # Secciones principales
    tab1, tab2, tab3, tab4 = st.tabs(["üè† Overview", "üìà Calidad", "üîç Exploraci√≥n", "‚öôÔ∏è Configuraci√≥n"])
    
    with tab1:
        st.header("Resumen del Pipeline")
        st.info("Esta aplicaci√≥n monitorea el pipeline de datos desde ingesta hasta silver layer")
        
    with tab2:
        st.header("M√©tricas de Calidad")
        st.warning("Implementar m√©tricas de calidad aqu√≠")
        
    with tab3:
        st.header("Exploraci√≥n de Datos")
        st.success("Visualizaci√≥n de datos Silver/Gold")
        
    with tab4:
        st.header("Configuraci√≥n del Pipeline")
        st.code("Configuraci√≥n de par√°metros y reprocesamiento")

if __name__ == "__main__":
    main()

#src/ingest.py

"""
M√≥dulo de ingesta de datos desde archivos CSV heterog√©neos
"""

import pandas as pd
import os
from pathlib import Path

def list_csv_files(data_dir: str) -> list:
    """
    Lista todos los archivos CSV en el directorio raw
    """
    pass

def read_heterogeneous_csv(file_path: str) -> pd.DataFrame:
    """
    Lee un CSV con manejo de encoding y delimitadores variables
    """
    pass

def ingest_raw_data(source_path: str, destination_path: str) -> dict:
    """
    Proceso principal de ingesta a capa raw
    Retorna m√©tricas de ingesta
    """
    pass

if __name__ == "__main__":
    # Ejecuci√≥n standalone para testing
    pass

# src/validate.py

"""
M√≥dulo de validaci√≥n de calidad de datos
"""

import pandas as pd
from typing import Dict, List

def validate_schema(df: pd.DataFrame, expected_columns: List[str]) -> Dict:
    """
    Valida que el DataFrame tenga las columnas esperadas
    """
    pass

def check_data_quality(df: pd.DataFrame) -> Dict:
    """
    Ejecuta validaciones de calidad:
    - Valores nulos
    - Duplicados
    - Valores at√≠picos
    - Consistencia de formatos
    """
    pass

def generate_quality_report(raw_metrics: Dict, validated_metrics: Dict) -> pd.DataFrame:
    """
    Genera reporte consolidado de calidad
    """
    pass

if __name__ == "__main__":
    # Testing de validaciones
    pass

#src/transform.py

"""
M√≥dulo de transformaci√≥n y normalizaci√≥n de datos
"""

import pandas as pd
from typing import Dict

def normalize_column_names(df: pd.DataFrame) -> pd.DataFrame:
    """
    Normaliza nombres de columnas a snake_case
    """
    pass

def standardize_date_formats(df: pd.DataFrame, date_columns: List[str]) -> pd.DataFrame:
    """
    Estandariza formatos de fecha
    """
    pass

def transform_to_bronze(raw_df: pd.DataFrame) -> pd.DataFrame:
    """
    Transforma datos raw a capa bronze (preservaci√≥n + metadatos b√°sicos)
    """
    pass

def transform_to_silver(bronze_df: pd.DataFrame) -> pd.DataFrame:
    """
    Transforma datos bronze a silver (limpieza + enriquecimiento)
    """
    pass

def calculate_kpis(silver_df: pd.DataFrame) -> Dict:
    """
    Calcula KPIs de negocio desde datos silver
    """
    pass

if __name__ == "__main__":
    # Testing de transformaciones
    pass

# docs/diccionario.md

# Diccionario de Datos

## Capa Raw
| Archivo | Descripci√≥n | Columnas | Notas |
|---------|-------------|----------|-------|
|         |             |          |       |

## Capa Bronze
| Entidad | Atributo | Tipo | Descripci√≥n |
|---------|----------|------|-------------|
|         |          |      |             |

## Capa Silver
| Entidad | Atributo | Tipo | Descripci√≥n | Reglas de Transformaci√≥n |
|---------|----------|------|-------------|--------------------------|
|         |          |      |             |                          |

#docs/gobernanza.md

# Gobernanza de Datos

## Est√°ndares de Calidad
- **Completitud**: 
- **Consistencia**:
- **Exactitud**:

## Procesos de Validaci√≥n
- Validaciones aplicadas en cada capa

## Metadatos
- Informaci√≥n del linaje de datos

#tests/checklist.md

# Checklist de Validaci√≥n

## ‚úÖ Ingesta
- [ ] Los datos crudos se ingresan correctamente
- [ ] Se preservan los datos originales
- [ ] Metadatos de ingesta generados

## ‚úÖ Validaci√≥n
- [ ] Se calculan m√©tricas de calidad
- [ ] Se reportan problemas de calidad
- [ ] Validaci√≥n de schema consistente

## ‚úÖ Transformaci√≥n
- [ ] Los datos se normalizan correctamente
- [ ] Se aplican reglas de negocio
- [ ] KPIs calculados apropiadamente

## ‚úÖ Almacenamiento
- [ ] Se generan las capas bronze y silver
- [ ] Los datos est√°n en formato Parquet
- [ ] Particionamiento adecuado

